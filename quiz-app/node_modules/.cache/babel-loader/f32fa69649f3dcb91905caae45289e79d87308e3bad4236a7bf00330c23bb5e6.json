{"ast":null,"code":"var _jsxFileName = \"/home/marat/quiz-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ChatContainer from './components/ChatContainer';\nimport quizConfig from './quiz_config.json'; // Import the quiz config\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nheight: 100vh;\nbackground-color: #e9ecef;\nwidth: 100%;  // Ensure the container takes full width\n`;\n_c = AppContainer;\nconst App = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [showCorrectOrIncorrect, setShowCorrectOrIncorrect] = useState(false);\n  const [showCorrectAnswers, setShowCorrectAnswers] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [isQuizFinished, setIsQuizFinished] = useState(false);\n  const [endOptions, setEndOptions] = useState([]);\n  const [answerSequence, setAnswerSequence] = useState([]);\n  useEffect(() => {\n    // Load quiz questions and settings from JSON file\n    setQuestions(quizConfig.questions);\n    setShowCorrectOrIncorrect(quizConfig.showCorrectOrIncorrect || false);\n    setShowCorrectAnswers(quizConfig.showCorrectAnswers || false);\n    setMessages([{\n      text: quizConfig.questions[0].question,\n      isUser: false\n    }]);\n  }, []);\n  const handleOptionClick = option => {\n    if (isQuizFinished) return; // Prevent option clicks if quiz is finished\n\n    const newMessages = [...messages, {\n      text: option,\n      isUser: true\n    }];\n    const isCorrect = option === questions[currentQuestionIndex].answer;\n    if (isCorrect) {\n      setScore(score + 1);\n      if (showCorrectOrIncorrect) {\n        newMessages.push({\n          text: 'Correct!',\n          isUser: false\n        }); // Print correct answer\n      }\n    } else {\n      if (showCorrectOrIncorrect) {\n        newMessages.push({\n          text: 'Incorrect.',\n          isUser: false\n        }); // Print incorrect answer without revealing the correct one\n      }\n      if (showCorrectAnswers) {\n        newMessages.push({\n          text: `The correct answer is ${questions[currentQuestionIndex].answer}.`,\n          isUser: false\n        }); // Optionally print correct answer\n      }\n    }\n\n    // Store the answer in the sequence\n    setAnswerSequence([...answerSequence, {\n      question: questions[currentQuestionIndex].question,\n      selectedOption: option,\n      isCorrect\n    }]);\n    setMessages(newMessages);\n    handleNextQuestion(newMessages, currentQuestionIndex + 1, isCorrect);\n  };\n  const handleNextQuestion = (newMessages, nextQuestionIndex, isCorrect) => {\n    setTimeout(() => {\n      if (nextQuestionIndex < questions.length) {\n        setTimeout(() => {\n          setMessages([...newMessages, {\n            text: questions[nextQuestionIndex].question,\n            isUser: false\n          } // Print next question\n          ]);\n          setCurrentQuestionIndex(nextQuestionIndex);\n        }, 2000); // Delay before printing the next question\n      } else {\n        setMessages([...newMessages, {\n          text: `Quiz finished! Your score is ${score + (isCorrect ? 1 : 0)}/${questions.length}.`,\n          isUser: false\n        }]);\n        setIsQuizFinished(true); // Set quiz as finished\n        setEndOptions(['Yes', 'No']); // Show end options\n\n        // Save the answer sequence to local storage\n        localStorage.setItem('answerSequence', JSON.stringify(answerSequence));\n      }\n    }, 500); // Delay after showing the answer before moving to the next question\n  };\n  const handleEndOptionClick = option => {\n    if (option === 'Yes') {\n      // Reset the quiz\n      setMessages([{\n        text: questions[0].question,\n        isUser: false\n      }]);\n      setCurrentQuestionIndex(0);\n      setScore(0);\n      setIsQuizFinished(false);\n      setEndOptions([]);\n      setAnswerSequence([]);\n    } else {\n      // Handle \"No\" option if needed, e.g., close the quiz or show a message\n    }\n  };\n  const currentOptions = currentQuestionIndex < questions.length ? questions[currentQuestionIndex].options : [];\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n      messages: messages,\n      options: isQuizFinished ? endOptions : currentOptions,\n      onOptionClick: isQuizFinished ? handleEndOptionClick : handleOptionClick,\n      isQuizFinished: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"ktLKkBRwMX1xwoY6EXRMD2x8B6I=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","styled","ChatContainer","quizConfig","jsxDEV","_jsxDEV","AppContainer","div","_c","App","_s","questions","setQuestions","showCorrectOrIncorrect","setShowCorrectOrIncorrect","showCorrectAnswers","setShowCorrectAnswers","messages","setMessages","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","isQuizFinished","setIsQuizFinished","endOptions","setEndOptions","answerSequence","setAnswerSequence","text","question","isUser","handleOptionClick","option","newMessages","isCorrect","answer","push","selectedOption","handleNextQuestion","nextQuestionIndex","setTimeout","length","localStorage","setItem","JSON","stringify","handleEndOptionClick","currentOptions","options","children","onOptionClick","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/marat/quiz-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ChatContainer from './components/ChatContainer';\nimport quizConfig from './quiz_config.json'; // Import the quiz config\n\nconst AppContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nheight: 100vh;\nbackground-color: #e9ecef;\nwidth: 100%;  // Ensure the container takes full width\n`;\n\nconst App = () => {\n    const [questions, setQuestions] = useState([]);\n    const [showCorrectOrIncorrect, setShowCorrectOrIncorrect] = useState(false);\n    const [showCorrectAnswers, setShowCorrectAnswers] = useState(false);\n    const [messages, setMessages] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [score, setScore] = useState(0);\n    const [isQuizFinished, setIsQuizFinished] = useState(false);\n    const [endOptions, setEndOptions] = useState([]);\n    const [answerSequence, setAnswerSequence] = useState([]);\n\n    useEffect(() => {\n        // Load quiz questions and settings from JSON file\n        setQuestions(quizConfig.questions);\n        setShowCorrectOrIncorrect(quizConfig.showCorrectOrIncorrect || false);\n        setShowCorrectAnswers(quizConfig.showCorrectAnswers || false);\n        setMessages([{ text: quizConfig.questions[0].question, isUser: false }]);\n    }, []);\n\n    const handleOptionClick = (option) => {\n        if (isQuizFinished) return; // Prevent option clicks if quiz is finished\n\n        const newMessages = [\n            ...messages,\n            { text: option, isUser: true }\n        ];\n\n        const isCorrect = option === questions[currentQuestionIndex].answer;\n\n        if (isCorrect) {\n            setScore(score + 1);\n            if (showCorrectOrIncorrect) {\n                newMessages.push({ text: 'Correct!', isUser: false }); // Print correct answer\n            }\n        } else {\n            if (showCorrectOrIncorrect) {\n                newMessages.push({ text: 'Incorrect.', isUser: false }); // Print incorrect answer without revealing the correct one\n            }\n            if (showCorrectAnswers) {\n                newMessages.push({ text: `The correct answer is ${questions[currentQuestionIndex].answer}.`, isUser: false }); // Optionally print correct answer\n            }\n        }\n\n        // Store the answer in the sequence\n        setAnswerSequence([...answerSequence, { question: questions[currentQuestionIndex].question, selectedOption: option, isCorrect }]);\n\n        setMessages(newMessages);\n        handleNextQuestion(newMessages, currentQuestionIndex + 1, isCorrect);\n    };\n\n    const handleNextQuestion = (newMessages, nextQuestionIndex, isCorrect) => {\n        setTimeout(() => {\n            if (nextQuestionIndex < questions.length) {\n                setTimeout(() => {\n                    setMessages([\n                        ...newMessages,\n                        { text: questions[nextQuestionIndex].question, isUser: false } // Print next question\n                    ]);\n                    setCurrentQuestionIndex(nextQuestionIndex);\n                }, 2000); // Delay before printing the next question\n            } else {\n                setMessages([\n                    ...newMessages,\n                    { text: `Quiz finished! Your score is ${score + (isCorrect ? 1 : 0)}/${questions.length}.`, isUser: false }\n                ]);\n                setIsQuizFinished(true); // Set quiz as finished\n                setEndOptions(['Yes', 'No']); // Show end options\n\n                // Save the answer sequence to local storage\n                localStorage.setItem('answerSequence', JSON.stringify(answerSequence));\n            }\n        }, 500); // Delay after showing the answer before moving to the next question\n    };\n\n    const handleEndOptionClick = (option) => {\n        if (option === 'Yes') {\n            // Reset the quiz\n            setMessages([{ text: questions[0].question, isUser: false }]);\n            setCurrentQuestionIndex(0);\n            setScore(0);\n            setIsQuizFinished(false);\n            setEndOptions([]);\n            setAnswerSequence([]);\n        } else {\n            // Handle \"No\" option if needed, e.g., close the quiz or show a message\n        }\n    };\n\n    const currentOptions = currentQuestionIndex < questions.length ? questions[currentQuestionIndex].options : [];\n\n    return (\n        <AppContainer>\n        <ChatContainer\n        messages={messages}\n        options={isQuizFinished ? endOptions : currentOptions}\n        onOptionClick={isQuizFinished ? handleEndOptionClick : handleOptionClick}\n        isQuizFinished={false}\n        />\n        </AppContainer>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}