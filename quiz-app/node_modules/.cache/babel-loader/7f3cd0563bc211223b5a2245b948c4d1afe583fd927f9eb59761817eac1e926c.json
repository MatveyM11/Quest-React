{"ast":null,"code":"var _jsxFileName = \"/home/marat/quiz-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport ChatContainer from './components/ChatContainer';\nimport OptionBubble from './components/OptionBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nheight: 100vh;\nbackground-color: #e9ecef;\nwidth: 100%;  // Ensure the container takes full width\n`;\n_c = AppContainer;\nconst App = () => {\n  _s();\n  const questions = [{\n    question: 'What is the capital of France?',\n    options: ['Paris', 'London', 'Berlin'],\n    answer: 'Paris'\n  }, {\n    question: 'What is 2 + 2?',\n    options: ['3', '4', '5'],\n    answer: '4'\n  }, {\n    question: 'What is the capital of Spain?',\n    options: ['Madrid', 'Rome', 'Lisbon'],\n    answer: 'Madrid'\n  }];\n  const [messages, setMessages] = useState([{\n    text: questions[0].question,\n    isUser: false\n  }]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [isQuizFinished, setIsQuizFinished] = useState(false);\n  const [endOptions, setEndOptions] = useState([]);\n  const handleOptionClick = option => {\n    if (isQuizFinished) return; // Prevent option clicks if quiz is finished\n\n    const newMessages = [...messages, {\n      text: option,\n      isUser: true\n    }];\n    const isCorrect = option === questions[currentQuestionIndex].answer;\n    if (isCorrect) {\n      setScore(score + 1);\n      newMessages.push({\n        text: 'Correct!',\n        isUser: false\n      }); // Print correct answer\n    } else {\n      newMessages.push({\n        text: `Incorrect. The correct answer is ${questions[currentQuestionIndex].answer}.`,\n        isUser: false\n      }); // Print incorrect answer\n    }\n    setMessages(newMessages);\n    handleNextQuestion(newMessages, currentQuestionIndex + 1, isCorrect);\n  };\n  const handleNextQuestion = (newMessages, nextQuestionIndex, isCorrect) => {\n    setTimeout(() => {\n      if (nextQuestionIndex < questions.length) {\n        setTimeout(() => {\n          setMessages([...newMessages, {\n            text: questions[nextQuestionIndex].question,\n            isUser: false\n          } // Print next question\n          ]);\n          setCurrentQuestionIndex(nextQuestionIndex);\n        }, 500); // Delay before printing the next question\n      } else {\n        setMessages([...newMessages, {\n          text: `Quiz finished! Your score is ${score + (isCorrect ? 1 : 0)}/${questions.length}.`,\n          isUser: false\n        }]);\n        setIsQuizFinished(true); // Set quiz as finished\n        setEndOptions(['Yes', 'No']); // Show end options\n      }\n    }, 500); // Delay after showing the answer before moving to the next question\n  };\n  const handleEndOptionClick = option => {\n    if (option === 'Yes') {\n      // Reset the quiz\n      setMessages([{\n        text: questions[0].question,\n        isUser: false\n      }]);\n      setCurrentQuestionIndex(0);\n      setScore(0);\n      setIsQuizFinished(false);\n      setEndOptions([]);\n    } else {\n      // Handle \"No\" option if needed, e.g., close the quiz or show a message\n    }\n  };\n  const currentOptions = currentQuestionIndex < questions.length ? questions[currentQuestionIndex].options : [];\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n      messages: messages,\n      options: isQuizFinished ? endOptions : currentOptions,\n      onOptionClick: isQuizFinished ? handleEndOptionClick : handleOptionClick,\n      isQuizFinished: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"Q4ZxcqMUZgocdU6XoCdOX9OLuiA=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","styled","ChatContainer","OptionBubble","jsxDEV","_jsxDEV","AppContainer","div","_c","App","_s","questions","question","options","answer","messages","setMessages","text","isUser","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","isQuizFinished","setIsQuizFinished","endOptions","setEndOptions","handleOptionClick","option","newMessages","isCorrect","push","handleNextQuestion","nextQuestionIndex","setTimeout","length","handleEndOptionClick","currentOptions","children","onOptionClick","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/marat/quiz-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport ChatContainer from './components/ChatContainer';\nimport OptionBubble from './components/OptionBubble';\n\nconst AppContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nheight: 100vh;\nbackground-color: #e9ecef;\nwidth: 100%;  // Ensure the container takes full width\n`;\n\nconst App = () => {\n    const questions = [\n        { question: 'What is the capital of France?', options: ['Paris', 'London', 'Berlin'], answer: 'Paris' },\n        { question: 'What is 2 + 2?', options: ['3', '4', '5'], answer: '4' },\n        { question: 'What is the capital of Spain?', options: ['Madrid', 'Rome', 'Lisbon'], answer: 'Madrid' }\n    ];\n\n    const [messages, setMessages] = useState([\n        { text: questions[0].question, isUser: false }\n    ]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [score, setScore] = useState(0);\n    const [isQuizFinished, setIsQuizFinished] = useState(false);\n    const [endOptions, setEndOptions] = useState([]);\n\n    const handleOptionClick = (option) => {\n        if (isQuizFinished) return; // Prevent option clicks if quiz is finished\n\n        const newMessages = [\n            ...messages,\n            { text: option, isUser: true }\n        ];\n\n        const isCorrect = option === questions[currentQuestionIndex].answer;\n\n        if (isCorrect) {\n            setScore(score + 1);\n            newMessages.push({ text: 'Correct!', isUser: false }); // Print correct answer\n        } else {\n            newMessages.push({ text: `Incorrect. The correct answer is ${questions[currentQuestionIndex].answer}.`, isUser: false }); // Print incorrect answer\n        }\n\n        setMessages(newMessages);\n        handleNextQuestion(newMessages, currentQuestionIndex + 1, isCorrect);\n    };\n\n    const handleNextQuestion = (newMessages, nextQuestionIndex, isCorrect) => {\n        setTimeout(() => {\n            if (nextQuestionIndex < questions.length) {\n                setTimeout(() => {\n                    setMessages([\n                        ...newMessages,\n                        { text: questions[nextQuestionIndex].question, isUser: false } // Print next question\n                    ]);\n                    setCurrentQuestionIndex(nextQuestionIndex);\n                }, 500); // Delay before printing the next question\n            } else {\n                setMessages([\n                    ...newMessages,\n                    { text: `Quiz finished! Your score is ${score + (isCorrect ? 1 : 0)}/${questions.length}.`, isUser: false }\n                ]);\n                setIsQuizFinished(true); // Set quiz as finished\n                setEndOptions(['Yes', 'No']); // Show end options\n            }\n        }, 500); // Delay after showing the answer before moving to the next question\n    };\n\n    const handleEndOptionClick = (option) => {\n        if (option === 'Yes') {\n            // Reset the quiz\n            setMessages([{ text: questions[0].question, isUser: false }]);\n            setCurrentQuestionIndex(0);\n            setScore(0);\n            setIsQuizFinished(false);\n            setEndOptions([]);\n        } else {\n            // Handle \"No\" option if needed, e.g., close the quiz or show a message\n        }\n    };\n\n    const currentOptions = currentQuestionIndex < questions.length ? questions[currentQuestionIndex].options : [];\n\n    return (\n        <AppContainer>\n        <ChatContainer\n        messages={messages}\n        options={isQuizFinished ? endOptions : currentOptions}\n        onOptionClick={isQuizFinished ? handleEndOptionClick : handleOptionClick}\n        isQuizFinished={false}\n        />\n        </AppContainer>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}