{"ast":null,"code":"var _jsxFileName = \"/home/marat/quiz-app/src/App.js\",\n  _s = $RefreshSig$();\n// Import necessary libraries and components\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ChatContainer from './components/ChatContainer';\nimport EmailInput from './components/EmailInput';\nimport Logo from './components/Logo'; // Import the Logo component\nimport quizConfig from './quiz_config.json'; // Import the quiz config\n\n// Styled container for the entire app\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nheight: 100vh;\nbackground-color: #e9ecef;\nwidth: 100%;\nposition: relative; /* Ensure the logo can be positioned correctly */\n`;\n\n// Styled wrapper for the content\n_c = AppContainer;\nconst ContentWrapper = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nflex: 1;\nmargin-top: 120px; /* Space for the logo */\nwidth: 100%;\noverflow-y: auto; /* Ensure the content wrapper can scroll */\n`;\n\n// Function to determine the ending based on user's answers\n_c2 = ContentWrapper;\nconst determineEnding = (answers, endings) => {\n  for (const ending of endings) {\n    if (ending.conditions.every(cond => answers.includes(cond))) {\n      return ending.message;\n    }\n  }\n  return endings.find(ending => ending.conditions.length === 0).message;\n};\nconst App = () => {\n  _s();\n  // State declarations\n  const [questions, setQuestions] = useState([]);\n  const [showCorrectOrIncorrect, setShowCorrectOrIncorrect] = useState(false);\n  const [showCorrectAnswers, setShowCorrectAnswers] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [isQuizFinished, setIsQuizFinished] = useState(false);\n  const [endOptions, setEndOptions] = useState([]);\n  const [showTryAgain, setShowTryAgain] = useState(false); // State for the \"Try again?\" bubble\n  const [answerSequence, setAnswerSequence] = useState([]);\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n  const [userEmail, setUserEmail] = useState('');\n  const [isEmailSubmitted, setIsEmailSubmitted] = useState(false);\n\n  // Load quiz questions and settings from JSON file on component mount\n  useEffect(() => {\n    setQuestions(quizConfig.questions);\n    setShowCorrectOrIncorrect(quizConfig.showCorrectOrIncorrect || false);\n    setShowCorrectAnswers(quizConfig.showCorrectAnswers || false);\n  }, []);\n\n  // Handle email submission\n  const handleEmailSubmit = email => {\n    setUserEmail(email);\n    setIsEmailSubmitted(true);\n    // Display the first question\n    setMessages([{\n      text: quizConfig.questions[0].question,\n      isUser: false\n    }]);\n  };\n\n  // Handle option click\n  const handleOptionClick = option => {\n    // Prevent option clicks if the quiz is finished or the question is already answered\n    if (isQuizFinished || answeredQuestions.includes(currentQuestionIndex)) return;\n    const newMessages = [...messages, {\n      text: option,\n      isUser: true\n    } // Add user's selected option to the messages\n    ];\n    const isCorrect = option === questions[currentQuestionIndex].answer;\n    if (isCorrect) {\n      setScore(score + 1); // Increment score if the answer is correct\n      if (showCorrectOrIncorrect) {\n        newMessages.push({\n          text: 'Correct!',\n          isUser: false\n        }); // Print correct answer\n      }\n    } else {\n      if (showCorrectOrIncorrect) {\n        newMessages.push({\n          text: 'Incorrect.',\n          isUser: false\n        }); // Print incorrect answer without revealing the correct one\n      }\n      if (showCorrectAnswers) {\n        newMessages.push({\n          text: `The correct answer is ${questions[currentQuestionIndex].answer}.`,\n          isUser: false\n        }); // Optionally print correct answer\n      }\n    }\n\n    // Store the answer in the sequence and mark the question as answered\n    setAnswerSequence([...answerSequence, {\n      question: questions[currentQuestionIndex].question,\n      selectedOption: option,\n      isCorrect\n    }]);\n    setAnsweredQuestions([...answeredQuestions, currentQuestionIndex]);\n    setMessages(newMessages);\n    handleNextQuestion(newMessages, currentQuestionIndex + 1, isCorrect, option); // Proceed to the next question\n  };\n\n  // Handle the transition to the next question\n  const handleNextQuestion = (newMessages, nextQuestionIndex, isCorrect, option) => {\n    setTimeout(() => {\n      if (nextQuestionIndex < questions.length) {\n        setTimeout(() => {\n          setMessages([...newMessages, {\n            text: questions[nextQuestionIndex].question,\n            isUser: false\n          } // Print next question\n          ]);\n          setCurrentQuestionIndex(nextQuestionIndex);\n        }, 2000); // Delay before printing the next question\n      } else {\n        const finalAnswerSequence = [...answerSequence, {\n          question: questions[currentQuestionIndex].question,\n          selectedOption: option,\n          isCorrect\n        }];\n        const endingMessage = determineEnding(finalAnswerSequence.map(a => a.selectedOption), quizConfig.endings);\n        setMessages([...newMessages, {\n          text: `Quiz finished! Your score is ${score + (isCorrect ? 1 : 0)}/${questions.length}.`,\n          isUser: false\n        }, {\n          text: endingMessage,\n          isUser: false\n        }]);\n        setIsQuizFinished(true); // Set quiz as finished\n        setEndOptions(['Да', 'Нет']); // Show end options\n\n        // Save the answer sequence to local storage\n        localStorage.setItem('answerSequence', JSON.stringify(finalAnswerSequence));\n\n        // Send the answer sequence and ending to the server\n        const dataToSend = {\n          email: userEmail,\n          answers: finalAnswerSequence,\n          ending: endingMessage\n        };\n        console.log('Sending data:', dataToSend); // Add logging\n\n        fetch('http://192.168.3.3:5000/save-answers', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(dataToSend)\n        }).then(response => response.text()).then(data => {\n          console.log('Success:', data);\n          setTimeout(() => setShowTryAgain(true), 500); // Delay showing \"Try again?\" bubble by 500ms\n        }).catch(error => {\n          console.error('Error:', error);\n        });\n      }\n    }, 500); // Delay after showing the answer before moving to the next question\n  };\n\n  // Handle end option click (Да or Нет)\n  const handleEndOptionClick = option => {\n    if (option === 'Да') {\n      // Reset the quiz\n      setMessages([{\n        text: questions[0].question,\n        isUser: false\n      }]);\n      setCurrentQuestionIndex(0);\n      setScore(0);\n      setIsQuizFinished(false);\n      setShowTryAgain(false);\n      setEndOptions([]);\n      setAnswerSequence([]);\n      setAnsweredQuestions([]);\n      localStorage.removeItem('answerSequence'); // Clear stored answers\n    } else {\n      // Reset to the email entering page\n      setIsEmailSubmitted(false);\n      setUserEmail('');\n      setMessages([]);\n      setCurrentQuestionIndex(0);\n      setScore(0);\n      setIsQuizFinished(false);\n      setShowTryAgain(false);\n      setEndOptions([]);\n      setAnswerSequence([]);\n      setAnsweredQuestions([]);\n      localStorage.removeItem('answerSequence'); // Clear stored answers\n    }\n  };\n\n  // Determine the current options to display\n  const currentOptions = isQuizFinished ? endOptions : questions[currentQuestionIndex] ? questions[currentQuestionIndex].options : [];\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(ContentWrapper, {\n      children: !isEmailSubmitted ? /*#__PURE__*/_jsxDEV(EmailInput, {\n        onEmailSubmit: handleEmailSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(ChatContainer, {\n        messages: messages,\n        options: currentOptions,\n        onOptionClick: isQuizFinished ? handleEndOptionClick : handleOptionClick,\n        isQuizFinished: isQuizFinished // Pass the quiz finished state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"tZltIYUabI/a4XbpB7UgVgRK8KM=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"ContentWrapper\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useEffect","styled","ChatContainer","EmailInput","Logo","quizConfig","jsxDEV","_jsxDEV","AppContainer","div","_c","ContentWrapper","_c2","determineEnding","answers","endings","ending","conditions","every","cond","includes","message","find","length","App","_s","questions","setQuestions","showCorrectOrIncorrect","setShowCorrectOrIncorrect","showCorrectAnswers","setShowCorrectAnswers","messages","setMessages","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","isQuizFinished","setIsQuizFinished","endOptions","setEndOptions","showTryAgain","setShowTryAgain","answerSequence","setAnswerSequence","answeredQuestions","setAnsweredQuestions","userEmail","setUserEmail","isEmailSubmitted","setIsEmailSubmitted","handleEmailSubmit","email","text","question","isUser","handleOptionClick","option","newMessages","isCorrect","answer","push","selectedOption","handleNextQuestion","nextQuestionIndex","setTimeout","finalAnswerSequence","endingMessage","map","a","localStorage","setItem","JSON","stringify","dataToSend","console","log","fetch","method","headers","body","then","response","data","catch","error","handleEndOptionClick","removeItem","currentOptions","options","children","fileName","_jsxFileName","lineNumber","columnNumber","onEmailSubmit","onOptionClick","_c3","$RefreshReg$"],"sources":["/home/marat/quiz-app/src/App.js"],"sourcesContent":["// Import necessary libraries and components\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ChatContainer from './components/ChatContainer';\nimport EmailInput from './components/EmailInput';\nimport Logo from './components/Logo'; // Import the Logo component\nimport quizConfig from './quiz_config.json'; // Import the quiz config\n\n// Styled container for the entire app\nconst AppContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nheight: 100vh;\nbackground-color: #e9ecef;\nwidth: 100%;\nposition: relative; /* Ensure the logo can be positioned correctly */\n`;\n\n// Styled wrapper for the content\nconst ContentWrapper = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nflex: 1;\nmargin-top: 120px; /* Space for the logo */\nwidth: 100%;\noverflow-y: auto; /* Ensure the content wrapper can scroll */\n`;\n\n// Function to determine the ending based on user's answers\nconst determineEnding = (answers, endings) => {\n    for (const ending of endings) {\n        if (ending.conditions.every(cond => answers.includes(cond))) {\n            return ending.message;\n        }\n    }\n    return endings.find(ending => ending.conditions.length === 0).message;\n};\n\nconst App = () => {\n    // State declarations\n    const [questions, setQuestions] = useState([]);\n    const [showCorrectOrIncorrect, setShowCorrectOrIncorrect] = useState(false);\n    const [showCorrectAnswers, setShowCorrectAnswers] = useState(false);\n    const [messages, setMessages] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [score, setScore] = useState(0);\n    const [isQuizFinished, setIsQuizFinished] = useState(false);\n    const [endOptions, setEndOptions] = useState([]);\n    const [showTryAgain, setShowTryAgain] = useState(false); // State for the \"Try again?\" bubble\n    const [answerSequence, setAnswerSequence] = useState([]);\n    const [answeredQuestions, setAnsweredQuestions] = useState([]);\n    const [userEmail, setUserEmail] = useState('');\n    const [isEmailSubmitted, setIsEmailSubmitted] = useState(false);\n\n    // Load quiz questions and settings from JSON file on component mount\n    useEffect(() => {\n        setQuestions(quizConfig.questions);\n        setShowCorrectOrIncorrect(quizConfig.showCorrectOrIncorrect || false);\n        setShowCorrectAnswers(quizConfig.showCorrectAnswers || false);\n    }, []);\n\n    // Handle email submission\n    const handleEmailSubmit = (email) => {\n        setUserEmail(email);\n        setIsEmailSubmitted(true);\n        // Display the first question\n        setMessages([{ text: quizConfig.questions[0].question, isUser: false }]);\n    };\n\n    // Handle option click\n    const handleOptionClick = (option) => {\n        // Prevent option clicks if the quiz is finished or the question is already answered\n        if (isQuizFinished || answeredQuestions.includes(currentQuestionIndex)) return;\n\n        const newMessages = [\n            ...messages,\n            { text: option, isUser: true } // Add user's selected option to the messages\n        ];\n\n        const isCorrect = option === questions[currentQuestionIndex].answer;\n\n        if (isCorrect) {\n            setScore(score + 1); // Increment score if the answer is correct\n            if (showCorrectOrIncorrect) {\n                newMessages.push({ text: 'Correct!', isUser: false }); // Print correct answer\n            }\n        } else {\n            if (showCorrectOrIncorrect) {\n                newMessages.push({ text: 'Incorrect.', isUser: false }); // Print incorrect answer without revealing the correct one\n            }\n            if (showCorrectAnswers) {\n                newMessages.push({ text: `The correct answer is ${questions[currentQuestionIndex].answer}.`, isUser: false }); // Optionally print correct answer\n            }\n        }\n\n        // Store the answer in the sequence and mark the question as answered\n        setAnswerSequence([...answerSequence, { question: questions[currentQuestionIndex].question, selectedOption: option, isCorrect }]);\n        setAnsweredQuestions([...answeredQuestions, currentQuestionIndex]);\n\n        setMessages(newMessages);\n        handleNextQuestion(newMessages, currentQuestionIndex + 1, isCorrect, option); // Proceed to the next question\n    };\n\n    // Handle the transition to the next question\n    const handleNextQuestion = (newMessages, nextQuestionIndex, isCorrect, option) => {\n        setTimeout(() => {\n            if (nextQuestionIndex < questions.length) {\n                setTimeout(() => {\n                    setMessages([\n                        ...newMessages,\n                        { text: questions[nextQuestionIndex].question, isUser: false } // Print next question\n                    ]);\n                    setCurrentQuestionIndex(nextQuestionIndex);\n                }, 2000); // Delay before printing the next question\n            } else {\n                const finalAnswerSequence = [...answerSequence, { question: questions[currentQuestionIndex].question, selectedOption: option, isCorrect }];\n                const endingMessage = determineEnding(finalAnswerSequence.map(a => a.selectedOption), quizConfig.endings);\n\n                setMessages([\n                    ...newMessages,\n                    { text: `Quiz finished! Your score is ${score + (isCorrect ? 1 : 0)}/${questions.length}.`, isUser: false },\n                            { text: endingMessage, isUser: false }\n                ]);\n                setIsQuizFinished(true); // Set quiz as finished\n                setEndOptions(['Да', 'Нет']); // Show end options\n\n                // Save the answer sequence to local storage\n                localStorage.setItem('answerSequence', JSON.stringify(finalAnswerSequence));\n\n                // Send the answer sequence and ending to the server\n                const dataToSend = {\n                    email: userEmail,\n                   answers: finalAnswerSequence,\n                   ending: endingMessage\n                };\n\n                console.log('Sending data:', dataToSend); // Add logging\n\n                fetch('http://192.168.3.3:5000/save-answers', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(dataToSend)\n                })\n                .then(response => response.text())\n                .then(data => {\n                    console.log('Success:', data);\n                    setTimeout(() => setShowTryAgain(true), 500); // Delay showing \"Try again?\" bubble by 500ms\n                })\n                .catch((error) => {\n                    console.error('Error:', error);\n                });\n            }\n        }, 500); // Delay after showing the answer before moving to the next question\n    };\n\n    // Handle end option click (Да or Нет)\n    const handleEndOptionClick = (option) => {\n        if (option === 'Да') {\n            // Reset the quiz\n            setMessages([{ text: questions[0].question, isUser: false }]);\n            setCurrentQuestionIndex(0);\n            setScore(0);\n            setIsQuizFinished(false);\n            setShowTryAgain(false);\n            setEndOptions([]);\n            setAnswerSequence([]);\n            setAnsweredQuestions([]);\n            localStorage.removeItem('answerSequence'); // Clear stored answers\n        } else {\n            // Reset to the email entering page\n            setIsEmailSubmitted(false);\n            setUserEmail('');\n            setMessages([]);\n            setCurrentQuestionIndex(0);\n            setScore(0);\n            setIsQuizFinished(false);\n            setShowTryAgain(false);\n            setEndOptions([]);\n            setAnswerSequence([]);\n            setAnsweredQuestions([]);\n            localStorage.removeItem('answerSequence'); // Clear stored answers\n        }\n    };\n\n    // Determine the current options to display\n    const currentOptions = isQuizFinished ? endOptions : (questions[currentQuestionIndex] ? questions[currentQuestionIndex].options : []);\n\n    return (\n        <AppContainer>\n        <Logo /> {/* Add the Logo component */}\n        <ContentWrapper>\n        {!isEmailSubmitted ? (\n            <EmailInput onEmailSubmit={handleEmailSubmit} />\n        ) : (\n            <ChatContainer\n            messages={messages}\n            options={currentOptions}\n            onOptionClick={isQuizFinished ? handleEndOptionClick : handleOptionClick}\n            isQuizFinished={isQuizFinished} // Pass the quiz finished state\n            />\n        )}\n        </ContentWrapper>\n        </AppContainer>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}