{"ast":null,"code":"var _jsxFileName = \"/home/marat/quiz-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport ChatContainer from './components/ChatContainer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nheight: 100vh;\nbackground-color: #e9ecef;\nwidth: 100%;  // Ensure the container takes full width\n`;\n_c = AppContainer;\nconst App = () => {\n  _s();\n  const questions = [{\n    question: 'What is the capital of France?',\n    options: ['Paris', 'London', 'Berlin'],\n    answer: 'Paris'\n  }, {\n    question: 'What is 2 + 2?',\n    options: ['3', '4', '5'],\n    answer: '4'\n  }, {\n    question: 'What is the capital of Spain?',\n    options: ['Madrid', 'Rome', 'Lisbon'],\n    answer: 'Madrid'\n  }];\n  const [messages, setMessages] = useState([{\n    text: questions[0].question,\n    isUser: false\n  }]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const handleOptionClick = option => {\n    const newMessages = [...messages, {\n      text: option,\n      isUser: true\n    }];\n    const isCorrect = option === questions[currentQuestionIndex].answer;\n    if (isCorrect) {\n      setScore(score + 1);\n      newMessages.push({\n        text: 'Correct!',\n        isUser: false\n      });\n    } else {\n      newMessages.push({\n        text: `Incorrect. The correct answer is ${questions[currentQuestionIndex].answer}.`,\n        isUser: false\n      });\n    }\n    setMessages(newMessages);\n    setTimeout(() => {\n      handleNextQuestion(newMessages, currentQuestionIndex + 1, isCorrect);\n    }, 2000); // Delay after showing the answer before moving to the next question\n  };\n  const handleNextQuestion = (newMessages, nextQuestionIndex, isCorrect) => {\n    setTimeout(() => {\n      if (nextQuestionIndex < questions.length) {\n        setMessages([...newMessages, {\n          text: questions[nextQuestionIndex].question,\n          isUser: false\n        }]);\n        setCurrentQuestionIndex(nextQuestionIndex);\n      } else {\n        setMessages([...newMessages, {\n          text: `Quiz finished! Your score is ${score + (isCorrect ? 1 : 0)}/${questions.length}.`,\n          isUser: false\n        }]);\n      }\n    }, 3000); // Adjust the delay if necessary\n  };\n  const currentOptions = currentQuestionIndex < questions.length ? questions[currentQuestionIndex].options : [];\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n      messages: messages,\n      options: currentOptions,\n      onOptionClick: handleOptionClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"gZUEY/OIhqHMRHFQ8WeZEUFAX30=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","styled","ChatContainer","jsxDEV","_jsxDEV","AppContainer","div","_c","App","_s","questions","question","options","answer","messages","setMessages","text","isUser","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","handleOptionClick","option","newMessages","isCorrect","push","setTimeout","handleNextQuestion","nextQuestionIndex","length","currentOptions","children","onOptionClick","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/marat/quiz-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport ChatContainer from './components/ChatContainer';\n\nconst AppContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nheight: 100vh;\nbackground-color: #e9ecef;\nwidth: 100%;  // Ensure the container takes full width\n`;\n\nconst App = () => {\n    const questions = [\n        { question: 'What is the capital of France?', options: ['Paris', 'London', 'Berlin'], answer: 'Paris' },\n        { question: 'What is 2 + 2?', options: ['3', '4', '5'], answer: '4' },\n        { question: 'What is the capital of Spain?', options: ['Madrid', 'Rome', 'Lisbon'], answer: 'Madrid' }\n    ];\n\n    const [messages, setMessages] = useState([\n        { text: questions[0].question, isUser: false }\n    ]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [score, setScore] = useState(0);\n\n    const handleOptionClick = (option) => {\n        const newMessages = [\n            ...messages,\n            { text: option, isUser: true }\n        ];\n\n        const isCorrect = option === questions[currentQuestionIndex].answer;\n\n        if (isCorrect) {\n            setScore(score + 1);\n            newMessages.push({ text: 'Correct!', isUser: false });\n        } else {\n            newMessages.push({ text: `Incorrect. The correct answer is ${questions[currentQuestionIndex].answer}.`, isUser: false });\n        }\n\n        setMessages(newMessages);\n\n        setTimeout(() => {\n            handleNextQuestion(newMessages, currentQuestionIndex + 1, isCorrect);\n        }, 2000); // Delay after showing the answer before moving to the next question\n    };\n\n    const handleNextQuestion = (newMessages, nextQuestionIndex, isCorrect) => {\n        setTimeout(() => {\n            if (nextQuestionIndex < questions.length) {\n                setMessages([\n                    ...newMessages,\n                    { text: questions[nextQuestionIndex].question, isUser: false }\n                ]);\n                setCurrentQuestionIndex(nextQuestionIndex);\n            } else {\n                setMessages([\n                    ...newMessages,\n                    { text: `Quiz finished! Your score is ${score + (isCorrect ? 1 : 0)}/${questions.length}.`, isUser: false }\n                ]);\n            }\n        }, 3000); // Adjust the delay if necessary\n    };\n\n    const currentOptions = currentQuestionIndex < questions.length ? questions[currentQuestionIndex].options : [];\n\n    return (\n        <AppContainer>\n        <ChatContainer messages={messages} options={currentOptions} onOptionClick={handleOptionClick} />\n        </AppContainer>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,aAAa,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,YAAY,GAAGJ,MAAM,CAACK,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GARIF,YAAY;AAUlB,MAAMG,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAMC,SAAS,GAAG,CACd;IAAEC,QAAQ,EAAE,gCAAgC;IAAEC,OAAO,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC;IAAEC,MAAM,EAAE;EAAQ,CAAC,EACvG;IAAEF,QAAQ,EAAE,gBAAgB;IAAEC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAAEC,MAAM,EAAE;EAAI,CAAC,EACrE;IAAEF,QAAQ,EAAE,+BAA+B;IAAEC,OAAO,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC;IAAEC,MAAM,EAAE;EAAS,CAAC,CACzG;EAED,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,CACrC;IAAEgB,IAAI,EAAEN,SAAS,CAAC,CAAC,CAAC,CAACC,QAAQ;IAAEM,MAAM,EAAE;EAAM,CAAC,CACjD,CAAC;EACF,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMsB,iBAAiB,GAAIC,MAAM,IAAK;IAClC,MAAMC,WAAW,GAAG,CAChB,GAAGV,QAAQ,EACX;MAAEE,IAAI,EAAEO,MAAM;MAAEN,MAAM,EAAE;IAAK,CAAC,CACjC;IAED,MAAMQ,SAAS,GAAGF,MAAM,KAAKb,SAAS,CAACQ,oBAAoB,CAAC,CAACL,MAAM;IAEnE,IAAIY,SAAS,EAAE;MACXJ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACnBI,WAAW,CAACE,IAAI,CAAC;QAAEV,IAAI,EAAE,UAAU;QAAEC,MAAM,EAAE;MAAM,CAAC,CAAC;IACzD,CAAC,MAAM;MACHO,WAAW,CAACE,IAAI,CAAC;QAAEV,IAAI,EAAE,oCAAoCN,SAAS,CAACQ,oBAAoB,CAAC,CAACL,MAAM,GAAG;QAAEI,MAAM,EAAE;MAAM,CAAC,CAAC;IAC5H;IAEAF,WAAW,CAACS,WAAW,CAAC;IAExBG,UAAU,CAAC,MAAM;MACbC,kBAAkB,CAACJ,WAAW,EAAEN,oBAAoB,GAAG,CAAC,EAAEO,SAAS,CAAC;IACxE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACd,CAAC;EAED,MAAMG,kBAAkB,GAAGA,CAACJ,WAAW,EAAEK,iBAAiB,EAAEJ,SAAS,KAAK;IACtEE,UAAU,CAAC,MAAM;MACb,IAAIE,iBAAiB,GAAGnB,SAAS,CAACoB,MAAM,EAAE;QACtCf,WAAW,CAAC,CACR,GAAGS,WAAW,EACd;UAAER,IAAI,EAAEN,SAAS,CAACmB,iBAAiB,CAAC,CAAClB,QAAQ;UAAEM,MAAM,EAAE;QAAM,CAAC,CACjE,CAAC;QACFE,uBAAuB,CAACU,iBAAiB,CAAC;MAC9C,CAAC,MAAM;QACHd,WAAW,CAAC,CACR,GAAGS,WAAW,EACd;UAAER,IAAI,EAAE,gCAAgCI,KAAK,IAAIK,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIf,SAAS,CAACoB,MAAM,GAAG;UAAEb,MAAM,EAAE;QAAM,CAAC,CAC9G,CAAC;MACN;IACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACd,CAAC;EAED,MAAMc,cAAc,GAAGb,oBAAoB,GAAGR,SAAS,CAACoB,MAAM,GAAGpB,SAAS,CAACQ,oBAAoB,CAAC,CAACN,OAAO,GAAG,EAAE;EAE7G,oBACIR,OAAA,CAACC,YAAY;IAAA2B,QAAA,eACb5B,OAAA,CAACF,aAAa;MAACY,QAAQ,EAAEA,QAAS;MAACF,OAAO,EAAEmB,cAAe;MAACE,aAAa,EAAEX;IAAkB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClF,CAAC;AAEvB,CAAC;AAAC5B,EAAA,CA3DID,GAAG;AAAA8B,GAAA,GAAH9B,GAAG;AA6DT,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAA+B,GAAA;AAAAC,YAAA,CAAAhC,EAAA;AAAAgC,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}