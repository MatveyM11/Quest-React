{"ast":null,"code":"var _jsxFileName = \"/home/marat/quiz-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport ChatContainer from './components/ChatContainer';\nimport InputBox from './components/InputBox';\nimport ChatBubble from './components/ChatBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  background-color: #e9ecef;\n  width: 100%;\n`;\n_c = AppContainer;\nconst App = () => {\n  _s();\n  const questions = [{\n    question: 'What is the capital of France?',\n    answer: 'Paris'\n  }, {\n    question: 'What is 2 + 2?',\n    answer: '4'\n  }, {\n    question: 'What is the capital of Spain?',\n    answer: 'Madrid'\n  }];\n  const [messages, setMessages] = useState([{\n    text: questions[0].question,\n    isUser: false\n  }]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [isTyping, setIsTyping] = useState(false);\n  const handleSend = message => {\n    if (isTyping) return;\n    const newMessages = [...messages, {\n      text: message,\n      isUser: true\n    }];\n    const isCorrect = message.trim().toLowerCase() === questions[currentQuestionIndex].answer.trim().toLowerCase();\n    if (isCorrect) {\n      setScore(score + 1);\n      newMessages.push({\n        text: 'Correct!',\n        isUser: false,\n        onComplete: () => handleNextQuestion(newMessages, currentQuestionIndex + 1)\n      });\n    } else {\n      newMessages.push({\n        text: `Incorrect. The correct answer is ${questions[currentQuestionIndex].answer}.`,\n        isUser: false,\n        onComplete: () => handleNextQuestion(newMessages, currentQuestionIndex + 1)\n      });\n    }\n    setMessages(newMessages);\n  };\n  const handleNextQuestion = (newMessages, nextQuestionIndex) => {\n    if (nextQuestionIndex < questions.length) {\n      setMessages([...newMessages, {\n        text: questions[nextQuestionIndex].question,\n        isUser: false,\n        onComplete: () => setIsTyping(false)\n      }]);\n      setCurrentQuestionIndex(nextQuestionIndex);\n    } else {\n      setMessages([...newMessages, {\n        text: `Quiz finished! Your score is ${score}/${questions.length}.`,\n        isUser: false,\n        onComplete: () => setIsTyping(false)\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ChatContainer, {\n      messages: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(ChatBubble, {\n        message: msg.text || '',\n        isUser: msg.isUser,\n        onComplete: msg.onComplete\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputBox, {\n      onSend: handleSend\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"fn7dSkGnR+q6nbFgOZxC6LG1TpA=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","styled","ChatContainer","InputBox","ChatBubble","jsxDEV","_jsxDEV","AppContainer","div","_c","App","_s","questions","question","answer","messages","setMessages","text","isUser","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","isTyping","setIsTyping","handleSend","message","newMessages","isCorrect","trim","toLowerCase","push","onComplete","handleNextQuestion","nextQuestionIndex","length","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","onSend","_c2","$RefreshReg$"],"sources":["/home/marat/quiz-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport ChatContainer from './components/ChatContainer';\nimport InputBox from './components/InputBox';\nimport ChatBubble from './components/ChatBubble';\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  background-color: #e9ecef;\n  width: 100%;\n`;\n\nconst App = () => {\n  const questions = [\n    { question: 'What is the capital of France?', answer: 'Paris' },\n    { question: 'What is 2 + 2?', answer: '4' },\n    { question: 'What is the capital of Spain?', answer: 'Madrid' }\n  ];\n\n  const [messages, setMessages] = useState([\n    { text: questions[0].question, isUser: false }\n  ]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const handleSend = (message) => {\n    if (isTyping) return;\n\n    const newMessages = [\n      ...messages,\n      { text: message, isUser: true }\n    ];\n\n    const isCorrect = message.trim().toLowerCase() === questions[currentQuestionIndex].answer.trim().toLowerCase();\n\n    if (isCorrect) {\n      setScore(score + 1);\n      newMessages.push({ text: 'Correct!', isUser: false, onComplete: () => handleNextQuestion(newMessages, currentQuestionIndex + 1) });\n    } else {\n      newMessages.push({ text: `Incorrect. The correct answer is ${questions[currentQuestionIndex].answer}.`, isUser: false, onComplete: () => handleNextQuestion(newMessages, currentQuestionIndex + 1) });\n    }\n\n    setMessages(newMessages);\n  };\n\n  const handleNextQuestion = (newMessages, nextQuestionIndex) => {\n    if (nextQuestionIndex < questions.length) {\n      setMessages([\n        ...newMessages,\n        { text: questions[nextQuestionIndex].question, isUser: false, onComplete: () => setIsTyping(false) }\n      ]);\n      setCurrentQuestionIndex(nextQuestionIndex);\n    } else {\n      setMessages([\n        ...newMessages,\n        { text: `Quiz finished! Your score is ${score}/${questions.length}.`, isUser: false, onComplete: () => setIsTyping(false) }\n      ]);\n    }\n  };\n\n  return (\n    <AppContainer>\n      <ChatContainer messages={messages.map((msg, index) => (\n        <ChatBubble\n          key={index}\n          message={msg.text || ''}\n          isUser={msg.isUser}\n          onComplete={msg.onComplete}\n        />\n      ))} />\n      <InputBox onSend={handleSend} />\n    </AppContainer>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}